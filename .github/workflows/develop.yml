name: Deploy_Refresher_To_Development_On_Push

on:
  push:
    branches:
      - develop

env:
  STAGE: dev-aci-iati
  NAME: refresher
  TAG: 0.1.1
  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
  AZURE_STORAGE_CONTAINER_SOURCE: ${{ secrets.AZURE_STORAGE_CONTAINER_SOURCE }}
  FILE_VALIDATION_URL: ${{ secrets.FILE_VALIDATION_URL }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_PORT: ${{ secrets.DB_PORT }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v2
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: "Build and push image"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -f refresh-dockerfile -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/$STAGE-$NAME-refresh:$TAG
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/$STAGE-$NAME-refresh:$TAG
          docker build . -f validate-dockerfile  -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/$STAGE-$NAME-validate:$TAG
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/$STAGE-$NAME-validate:$TAG
      - name: "Deploy Refresh to Azure Container Instances"
        uses: "azure/CLI@v1"
        with:
            azcliversion: 2.19.1
            inlineScript: |
              az container create \
              --resource-group "${{ secrets.RESOURCE_GROUP }}" \
              --image "${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}-refresh:${{ env.TAG }}" \
              --registry-login-server "${{ secrets.REGISTRY_LOGIN_SERVER }}" \
              --registry-username "${{ secrets.REGISTRY_USERNAME }}" \
              --registry-password "${{ secrets.REGISTRY_PASSWORD }}" \
              --name "${{ env.STAGE }}-${{ env.NAME }}-refresh" \
              --location "uksouth" \
              --restart-policy "Always" \
              --ip-address "Private" \
              --vnet "dev-iati-refresher" \
              --subnet "default" \
              --memory "4" \
              --cpu "1" \
              --os-type "Linux" \
              --secure-environment-variables \
                AZURE_STORAGE_CONNECTION_STRING="${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
                AZURE_STORAGE_CONTAINER_SOURCE="${{ env.AZURE_STORAGE_CONTAINER_SOURCE }}" \
                DB_HOST="${{ env.DB_HOST }}" \
                DB_PORT="${{ env.DB_PORT }}" \
                DB_USER="${{ env.DB_USER }}" \
                DB_PASS="${{ env.DB_PASS }}" \
                DB_NAME="${{ env.DB_NAME }}" \
      - name: "Deploy Refresh to Azure Container Instances"
        uses: "azure/CLI@v1"
        with:
            azcliversion: 2.19.1
            inlineScript: |
              az container create \
              --resource-group "${{ secrets.RESOURCE_GROUP }}" \
              --image "${{ secrets.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}-validate:${{ env.TAG }}" \
              --registry-login-server "${{ secrets.REGISTRY_LOGIN_SERVER }}" \
              --registry-username "${{ secrets.REGISTRY_USERNAME }}" \
              --registry-password "${{ secrets.REGISTRY_PASSWORD }}" \
              --name "${{ env.STAGE }}-${{ env.NAME }}-validate" \
              --location "uksouth" \
              --restart-policy "Always" \
              --ip-address "Private" \
              --vnet "dev-iati-refresher" \
              --subnet "default" \
              --memory "2" \
              --cpu "1" \
              --os-type "Linux" \
              --secure-environment-variables \
                AZURE_STORAGE_CONNECTION_STRING="${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
                AZURE_STORAGE_CONTAINER_SOURCE="${{ env.AZURE_STORAGE_CONTAINER_SOURCE }}" \
                DB_HOST="${{ env.DB_HOST }}" \
                DB_PORT="${{ env.DB_PORT }}" \
                DB_USER="${{ env.DB_USER }}" \
                DB_PASS="${{ env.DB_PASS }}" \
                DB_NAME="${{ env.DB_NAME }}"



              