name: Deploy_Refresher_To_Development_On_Push

on:
  workflow_dispatch:
  push:
    paths-ignore: # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - "**/README.md"
      - ".github/workflows/main.yml"
    branches:
      - develop

env:
  STAGE: dev-aci-iati
  ENVIRONMENT: dev
  NAME: refresher
  TAG: ${{ github.sha }}
  RESOURCE_GROUP: rg-refresher-dev
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.DEV_STORAGE_CONNECTION_STRING }}
  AZURE_STORAGE_CONTAINER_SOURCE: ${{ secrets.DEV_AZURE_STORAGE_CONTAINER_SOURCE }}
  AZURE_STORAGE_CONTAINER_CLEAN: ${{ secrets.DEV_AZURE_STORAGE_CONTAINER_CLEAN }}
  FILE_VALIDATION_URL: ${{ secrets.DEV_FILE_VALIDATION_URL }}
  FILE_VALIDATION_KEY_NAME: ${{ secrets.DEV_FILE_VALIDATION_KEY_NAME }}
  FILE_VALIDATION_KEY_VALUE: ${{ secrets.DEV_FILE_VALIDATION_KEY_VALUE }}
  SCHEMA_VALIDATION_URL: ${{ secrets.DEV_SCHEMA_VALIDATION_URL }}
  SCHEMA_VALIDATION_KEY_NAME: ${{ secrets.DEV_SCHEMA_VALIDATION_KEY_NAME }}
  SCHEMA_VALIDATION_KEY_VALUE: ${{ secrets.DEV_SCHEMA_VALIDATION_KEY_VALUE }}
  FLATTENER_API_URL: ${{ secrets.DEV_FLATTENER_API_URL }}
  FLATTENER_KEY_NAME: ${{ secrets.DEV_FLATTENER_KEY_NAME }}
  FLATTENER_KEY_VALUE: ${{ secrets.DEV_FLATTENER_API_KEY }}
  SOLR_API_URL: ${{ secrets.DEV_SOLR_API_URL }}
  SOLR_USER: ${{ secrets.DEV_SOLR_USER }}
  SOLR_PASSWORD: ${{ secrets.DEV_SOLR_PASSWORD }}
  SOLR_PARALLEL_PROCESSES: 5
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_PORT: ${{ secrets.DB_PORT }}
  LOG_WORKSPACE_ID: ${{ secrets.DEV_LOG_WORKSPACE_ID }}
  LOG_WORKSPACE_KEY: ${{ secrets.DEV_LOG_WORKSPACE_KEY }}
  ACTIVITIES_LAKE_CONTAINER_NAME: ${{ secrets.DEV_ACTIVITIES_LAKE_CONTAINER_NAME }}
  SOLR_500_SLEEP: ${{ secrets.DEV_SOLR_500_SLEEP }}
  COMMSHUB_URL: ${{ secrets.DEV_COMMSHUB_URL }}
  COMMSHUB_KEY: ${{ secrets.DEV_COMMSHUB_KEY }}
  REGISTRY_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  REGISTRY_USERNAME: ${{ secrets.ACR_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.ACR_PASSWORD }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@v2
      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.DEV_AZURE_CREDENTIALS }}
      - name: "Login to Docker Hub"
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: "Login to Azure Container Registry"
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
      - name: "Build and push image"
        run: |
          IMAGE_NAME=$REGISTRY_LOGIN_SERVER/$STAGE-$NAME:$TAG
          echo $IMAGE_NAME
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          docker build . -f Dockerfile -t $IMAGE_NAME
          docker push $IMAGE_NAME

      - name: "Delete existing containers"
        uses: "azure/CLI@1.0.4"
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container delete -y \
              --name "${{ env.STAGE }}-${{ env.NAME }}-refresh" \
              --resource-group "${{ env.RESOURCE_GROUP }}"
            az container delete -y \
              --name "${{ env.STAGE }}-${{ env.NAME }}-validate" \
              --resource-group "${{ env.RESOURCE_GROUP }}"
            az container delete -y \
              --name "${{ env.STAGE }}-${{ env.NAME }}-clean" \
              --resource-group "${{ env.RESOURCE_GROUP }}"
            az container delete -y \
              --name "${{ env.STAGE }}-${{ env.NAME }}-flatten" \
              --resource-group "${{ env.RESOURCE_GROUP }}"
            az container delete -y \
              --name "${{ env.STAGE }}-${{ env.NAME }}-lakify" \
              --resource-group "${{ env.RESOURCE_GROUP }}"
            az container delete -y \
              --name "${{ env.STAGE }}-${{ env.NAME }}-solrize" \
              --resource-group "${{ env.RESOURCE_GROUP }}"

      - name: 'Replace Env Vars and Secrets in Yaml template'
        run: |
            sed -i ''s/#{ENVIRONMENT}#/${{ env.ENVIRONMENT }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{REGISTRY_LOGIN_SERVER}#/${{ env.REGISTRY_LOGIN_SERVER }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{REGISTRY_USERNAME}#/${{ env.REGISTRY_USERNAME }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{REGISTRY_PASSWORD}#/${{ env.REGISTRY_PASSWORD }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{LOG_WORKSPACE_ID}#/${{ env.LOG_WORKSPACE_ID }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{LOG_WORKSPACE_KEY}#/${{ env.LOG_WORKSPACE_KEY }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{IMAGE_NAME}#/${{ env.IMAGE_NAME }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{AZURE_STORAGE_CONNECTION_STRING}#/${{ env.AZURE_STORAGE_CONNECTION_STRING }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{DB_HOST}#/${{ env.DB_HOST }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{DB_PORT}#/${{ env.DB_PORT }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{DB_USER}#/${{ env.DB_USER }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{DB_PASS}#/${{ env.DB_PASS }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{DB_NAME}#/${{ env.DB_NAME }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{SOLR_API_URL}#/${{ env.SOLR_API_URL }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{SOLR_USER}#/${{ env.SOLR_USER }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{SOLR_PASSWORD}#/${{ env.SOLR_PASSWORD }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{COMMSHUB_URL}#/${{ env.COMMSHUB_URL }}/g'' ./deployment/deployment.yml
            sed -i ''s/#{COMMSHUB_KEY}#/${{ env.COMMSHUB_KEY }}/g'' ./deployment/deployment.yml


      - name: "Deploy Refresh to Azure Container Instances"
        uses: "azure/CLI@1.0.4"
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --file ./deployment/deployment.yml

      - name: "Deploy Validate to Azure Container Instances"
        uses: "azure/CLI@1.0.4"
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --image "${{ env.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}" \
            --command-line "/usr/local/bin/python /code/handler.py -t validateloop" \
            --registry-login-server "${{ env.REGISTRY_LOGIN_SERVER }}" \
            --registry-username "${{ env.REGISTRY_USERNAME }}" \
            --registry-password "${{ env.REGISTRY_PASSWORD }}" \
            --name "${{ env.STAGE }}-${{ env.NAME }}-validate" \
            --location "uksouth" \
            --restart-policy "Always" \
            --ip-address "Private" \
            --memory "0.5" \
            --cpu "0.1" \
            --os-type "Linux" \
            --log-analytics-workspace "${{ env.LOG_WORKSPACE_ID }}" \
            --log-analytics-workspace-key "${{ env.LOG_WORKSPACE_KEY }}" \
            --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}" \
            --secure-environment-variables \
              AZURE_STORAGE_CONNECTION_STRING="${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
              AZURE_STORAGE_CONTAINER_SOURCE="${{ env.AZURE_STORAGE_CONTAINER_SOURCE }}" \
              VALIDATOR_API_URL="${{ env.FILE_VALIDATION_URL }}" \
              SCHEMA_VALIDATION_API_URL="${{ env.SCHEMA_VALIDATION_URL }}" \
              SCHEMA_VALIDATION_KEY_NAME="${{ env.SCHEMA_VALIDATION_KEY_NAME }}" \
              SCHEMA_VALIDATION_KEY_VALUE="${{ env.SCHEMA_VALIDATION_KEY_VALUE }}" \
              VALIDATOR_API_KEY_NAME="${{ env.FILE_VALIDATION_KEY_NAME }}" \
              VALIDATOR_API_KEY_VALUE="${{ env.FILE_VALIDATION_KEY_VALUE }}" \
              VALIDATOR_PARALLEL="${{ env.VALIDATOR_PARALLEL }}" \
              DB_HOST="${{ env.DB_HOST }}" \
              DB_PORT="${{ env.DB_PORT }}" \
              DB_USER="${{ env.DB_USER }}" \
              DB_PASS="${{ env.DB_PASS }}" \
              DB_NAME="${{ env.DB_NAME }}" \
              SOLR_API_URL="${{ env.SOLR_API_URL }}" \
              SOLR_USER="${{ env.SOLR_USER }}" \
              SOLR_PASSWORD="${{ env.SOLR_PASSWORD }}" \
              COMMSHUB_URL="${{ env.COMMSHUB_URL }}" \
              COMMSHUB_KEY="${{ env.COMMSHUB_KEY }}"
            az resource tag \
              --tags avgCPU=true ACU=true ACUvalue=21 \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.STAGE }}-${{ env.NAME }}-validate" \
              --resource-type "Microsoft.ContainerInstance/containerGroups"

      - name: "Deploy Clean to Azure Container Instances"
        uses: "azure/CLI@1.0.4"
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --image "${{ env.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}" \
            --command-line "/usr/local/bin/python /code/handler.py -t cleanloop" \
            --registry-login-server "${{ env.REGISTRY_LOGIN_SERVER }}" \
            --registry-username "${{ env.REGISTRY_USERNAME }}" \
            --registry-password "${{ env.REGISTRY_PASSWORD }}" \
            --name "${{ env.STAGE }}-${{ env.NAME }}-clean" \
            --location "uksouth" \
            --restart-policy "Always" \
            --ip-address "Private" \
            --memory "0.3" \
            --cpu "0.1" \
            --os-type "Linux" \
            --log-analytics-workspace "${{ env.LOG_WORKSPACE_ID }}" \
            --log-analytics-workspace-key "${{ env.LOG_WORKSPACE_KEY }}" \
            --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}" \
            --secure-environment-variables \
              AZURE_STORAGE_CONNECTION_STRING="${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
              AZURE_STORAGE_CONTAINER_SOURCE="${{ env.AZURE_STORAGE_CONTAINER_SOURCE }}" \
              AZURE_STORAGE_CONTAINER_CLEAN="${{ env.AZURE_STORAGE_CONTAINER_CLEAN }}" \
              VALIDATOR_API_URL="${{ env.ACTIVITY_VALIDATION_URL }}" \
              SCHEMA_VALIDATION_API_URL="${{ env.SCHEMA_VALIDATION_URL }}" \
              VALIDATOR_API_KEY_NAME="${{ env.FILE_VALIDATION_KEY_NAME }}" \
              VALIDATOR_API_KEY_VALUE="${{ env.FILE_VALIDATION_KEY_VALUE }}" \
              SCHEMA_VALIDATION_KEY_NAME="${{ env.SCHEMA_VALIDATION_KEY_NAME }}" \
              SCHEMA_VALIDATION_KEY_VALUE="${{ env.SCHEMA_VALIDATION_KEY_VALUE }}" \
              VALIDATOR_PARALLEL="${{ env.VALIDATOR_PARALLEL }}" \
              DB_HOST="${{ env.DB_HOST }}" \
              DB_PORT="${{ env.DB_PORT }}" \
              DB_USER="${{ env.DB_USER }}" \
              DB_PASS="${{ env.DB_PASS }}" \
              DB_NAME="${{ env.DB_NAME }}" \
              SOLR_API_URL="${{ env.SOLR_API_URL }}" \
              SOLR_USER="${{ env.SOLR_USER }}" \
              SOLR_PASSWORD="${{ env.SOLR_PASSWORD }}" \
              COMMSHUB_URL="${{ env.COMMSHUB_URL }}" \
              COMMSHUB_KEY="${{ env.COMMSHUB_KEY }}"
            az resource tag \
              --tags avgCPU=true ACU=true ACUvalue=21 \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.STAGE }}-${{ env.NAME }}-clean" \
              --resource-type "Microsoft.ContainerInstance/containerGroups"

      - name: "Deploy Flatten to Azure Container Instances"
        uses: "azure/CLI@1.0.4"
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --image "${{ env.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}" \
            --command-line "/usr/local/bin/python /code/handler.py -t flattenloop" \
            --registry-login-server "${{ env.REGISTRY_LOGIN_SERVER }}" \
            --registry-username "${{ env.REGISTRY_USERNAME }}" \
            --registry-password "${{ env.REGISTRY_PASSWORD }}" \
            --name "${{ env.STAGE }}-${{ env.NAME }}-flatten" \
            --location "uksouth" \
            --restart-policy "Always" \
            --ip-address "Private" \
            --memory "0.8" \
            --cpu "0.1" \
            --os-type "Linux" \
            --log-analytics-workspace "${{ env.LOG_WORKSPACE_ID }}" \
            --log-analytics-workspace-key "${{ env.LOG_WORKSPACE_KEY }}" \
            --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}" \
            --secure-environment-variables \
              AZURE_STORAGE_CONNECTION_STRING="${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
              AZURE_STORAGE_CONTAINER_SOURCE="${{ env.AZURE_STORAGE_CONTAINER_SOURCE }}" \
              AZURE_STORAGE_CONTAINER_CLEAN="${{ env.AZURE_STORAGE_CONTAINER_CLEAN }}" \
              FLATTENER_API_URL="${{ env.FLATTENER_API_URL }}" \
              FLATTENER_KEY_NAME="${{ env.FLATTENER_KEY_NAME }}" \
              FLATTENER_KEY_VALUE="${{ env.FLATTENER_KEY_VALUE }}" \
              DB_HOST="${{ env.DB_HOST }}" \
              DB_PORT="${{ env.DB_PORT }}" \
              DB_USER="${{ env.DB_USER }}" \
              DB_PASS="${{ env.DB_PASS }}" \
              DB_NAME="${{ env.DB_NAME }}" \
              SOLR_API_URL="${{ env.SOLR_API_URL }}" \
              SOLR_USER="${{ env.SOLR_USER }}" \
              SOLR_PASSWORD="${{ env.SOLR_PASSWORD }}" \
              COMMSHUB_URL="${{ env.COMMSHUB_URL }}" \
              COMMSHUB_KEY="${{ env.COMMSHUB_KEY }}"
            az resource tag \
              --tags avgCPU=true ACU=true ACUvalue=21 \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.STAGE }}-${{ env.NAME }}-flatten" \
              --resource-type "Microsoft.ContainerInstance/containerGroups"

      - name: "Deploy Lakify to Azure Container Instances"
        uses: "azure/CLI@1.0.4"
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --image "${{ env.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}" \
            --command-line "/usr/local/bin/python /code/handler.py -t lakifyloop" \
            --registry-login-server "${{ env.REGISTRY_LOGIN_SERVER }}" \
            --registry-username "${{ env.REGISTRY_USERNAME }}" \
            --registry-password "${{ env.REGISTRY_PASSWORD }}" \
            --name "${{ env.STAGE }}-${{ env.NAME }}-lakify" \
            --location "uksouth" \
            --restart-policy "Always" \
            --ip-address "Private" \
            --memory "0.8" \
            --cpu "0.1" \
            --os-type "Linux" \
            --log-analytics-workspace "${{ env.LOG_WORKSPACE_ID }}" \
            --log-analytics-workspace-key "${{ env.LOG_WORKSPACE_KEY }}" \
            --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}" \
            --secure-environment-variables \
              AZURE_STORAGE_CONNECTION_STRING="${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
              AZURE_STORAGE_CONTAINER_SOURCE="${{ env.AZURE_STORAGE_CONTAINER_SOURCE }}" \
              ACTIVITIES_LAKE_CONTAINER_NAME="${{ env.ACTIVITIES_LAKE_CONTAINER_NAME }}" \
              AZURE_STORAGE_CONTAINER_CLEAN="${{ env.AZURE_STORAGE_CONTAINER_CLEAN }}" \
              SOLR_API_URL="${{ env.SOLR_API_URL }}" \
              DB_HOST="${{ env.DB_HOST }}" \
              DB_PORT="${{ env.DB_PORT }}" \
              DB_USER="${{ env.DB_USER }}" \
              DB_PASS="${{ env.DB_PASS }}" \
              DB_NAME="${{ env.DB_NAME }}" \
              COMMSHUB_URL="${{ env.COMMSHUB_URL }}" \
              COMMSHUB_KEY="${{ env.COMMSHUB_KEY }}"
            az resource tag \
              --tags avgCPU=true ACU=true ACUvalue=21 \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.STAGE }}-${{ env.NAME }}-lakify" \
              --resource-type "Microsoft.ContainerInstance/containerGroups"

      - name: "Deploy Solrize to Azure Container Instances"
        uses: "azure/CLI@1.0.4"
        with:
          azcliversion: 2.30.0
          inlineScript: |
            az container create \
            --resource-group "${{ env.RESOURCE_GROUP }}" \
            --image "${{ env.REGISTRY_LOGIN_SERVER }}/${{env.STAGE}}-${{env.NAME}}:${{ env.TAG }}" \
            --command-line "/usr/local/bin/python /code/handler.py -t solrizeloop" \
            --registry-login-server "${{ env.REGISTRY_LOGIN_SERVER }}" \
            --registry-username "${{ env.REGISTRY_USERNAME }}" \
            --registry-password "${{ env.REGISTRY_PASSWORD }}" \
            --name "${{ env.STAGE }}-${{ env.NAME }}-solrize" \
            --location "uksouth" \
            --restart-policy "Always" \
            --ip-address "Private" \
            --memory "2" \
            --cpu "0.1" \
            --os-type "Linux" \
            --log-analytics-workspace "${{ env.LOG_WORKSPACE_ID }}" \
            --log-analytics-workspace-key "${{ env.LOG_WORKSPACE_KEY }}" \
            --subscription "${{ env.AZURE_SUBSCRIPTION_ID }}" \
            --secure-environment-variables \
              AZURE_STORAGE_CONNECTION_STRING="${{ env.AZURE_STORAGE_CONNECTION_STRING }}" \
              AZURE_STORAGE_CONTAINER_SOURCE="${{ env.AZURE_STORAGE_CONTAINER_SOURCE }}" \
              SOLR_API_URL="${{ env.SOLR_API_URL }}" \
              SOLR_USER="${{ env.SOLR_USER }}" \
              SOLR_PASSWORD="${{ env.SOLR_PASSWORD }}" \
              SOLR_PARALLEL_PROCESSES="${{ env.SOLR_PARALLEL_PROCESSES }}" \
              ACTIVITIES_LAKE_CONTAINER_NAME="${{ env.ACTIVITIES_LAKE_CONTAINER_NAME }}" \
              DB_HOST="${{ env.DB_HOST }}" \
              DB_PORT="${{ env.DB_PORT }}" \
              DB_USER="${{ env.DB_USER }}" \
              DB_PASS="${{ env.DB_PASS }}" \
              DB_NAME="${{ env.DB_NAME }}" \
              SOLR_500_SLEEP="${{ env.SOLR_500_SLEEP }}" \
              COMMSHUB_URL="${{ env.COMMSHUB_URL }}" \
              COMMSHUB_KEY="${{ env.COMMSHUB_KEY }}"
            az resource tag \
              --tags avgCPU=true ACU=true ACUvalue=21 \
              --resource-group "${{ env.RESOURCE_GROUP }}" \
              --name "${{ env.STAGE }}-${{ env.NAME }}-solrize" \
              --resource-type "Microsoft.ContainerInstance/containerGroups"
